
var Routing = {
  host: <%= "#{request.protocol}#{request.host_with_port}".inspect %>,

  get_path: function (segments, options, overrides) {
    var extras = null;

    if (overrides.length == 1 && typeof overrides[0] == 'object') {
      var args = overrides[0];
    } else {
      var args = {};
      var keys = segments.match(/:\w+/g) || {};
      for(i=0; i<keys.length; i++) {
        args[keys[i].replace(':', '')] = overrides[i];
      }
    }
    for (var property in args) {
      if (options[property] != null) {
        options[property] = args[property];
      }
      else {
        extras = extras ? extras : {};
        extras[property] = args[property]
      }
    }

    for (var property in overrides) {
      if (options[property] != null) {
        options[property] = overrides[property];
      }
      else {
        extras = extras ? extras : {};
        extras[property] = overrides[property]
      }
    }

    for (var prop in options) {
      segments = segments.replace(":"+prop, options[prop]);
    }

    var query="";
    if (extras) {
      query += "?"
      for (var extra in extras) {
        query += extra + "=" + extras[extra] + "&";
      }
      query = query.substring(0, query.length-1);
    }

    var path = segments;
    while (path[path.length - 1] == "/") {
      path = path.substring(0, path.length - 1);
    }
    return path + query;
  },

  get_url: function (segments, options, overrides) {
    return Routing.host + Routing.get_path(segments, options, overrides);
  },

<% ActionController::Routing::Routes.named_routes.each do |name, route| -%>
  <%= name %>_url: function () {
    return Routing.host + Routing.<%= name %>_path(arguments)
  },

  <%= name %>_path: function () {
    var options = {
    <% route.significant_keys.each do |key| -%>
      <%= key %>: <%= route.defaults[key].nil? ? "''" : "'#{route.defaults[key]}'" %>,
    <% end -%>
    };
    return Routing.get_path("<%= route.segments.collect(&:to_s) %>", options, arguments);
  },

<% end -%>

};
