var Routing = {
	get_path: function (segments, options, overrides) {
		var extras = null;

		for (var property in overrides) {
			if (options[property] != null) {
				options[property] = overrides[property];
			}
			else {
				extras = extras ? extras : {};
				extras[property] = overrides[property]
			}
		}

		for (var prop in options) {
			//perform replace for optional props, example (format=json):
			// "/avatar/new(.:format)?" ==> "/avatar/new.json"  
			segments = segments.replace(new RegExp("\\(([^:]*):" + prop + '\\)\\?'),(options[prop] ? '$1' : '') + options[prop])
			//perform standard replace for required props, example: (id=1)
			// "/avatar/:id/edit" ==> "/avatar/1/edit"  
			segments = segments.replace(":"+prop, options[prop]);
		}

		var query="";
		if (extras) {
			query += "?"
			for (var extra in extras) {
				query += extra + "=" + extras[extra] + "&";
			}
			query = query.substring(0, query.length-1);
		}

		var path = segments;
		while (path[path.length - 1] == "/") {
			path = path.substring(0, path.length - 1);
		}
		return path + query;
	},

  get_url: function (segments, options, overrides) {
    return Routing.host + Routing.get_path(segments, options, overrides);
  },

<% ActionController::Routing::Routes.named_routes.each do |name, route| -%>
  <% next if (name.to_s[0..3] == 'node' or name.to_s[0..13] == 'formatted_node') -%>
  <%= name %>_url: function (arguments) {
    return Routing.host + Routing.<%= name %>_path(arguments);
  },

  <%= name %>_path: function (arguments) {
    var options = {
<%= route.significant_keys.collect { |key|
"      #{key} : #{route.defaults[key].nil? ? "''" : "'#{route.defaults[key]}'"}"
}.join(",\n") %>
    };
    return Routing.get_path("<%= route.segments.collect(&:to_s) %>", options, arguments);
  },

<% end -%>
  host: <%= "#{request.protocol}#{request.host_with_port}".inspect %>
};
